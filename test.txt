import passport from "passport";
import { Strategy } from "passport-local";
const LocalStrategy = Strategy;
// import * as model from '../models/users.js'
import { verifyPass } from '../bcrypt.js';

import { logError } from '../../scripts/loggers/loggers.js'
import {mostrarDatosProcesos, autenticarUsuario, desloggearUsuario, user, mostrarDatosUsuario, getLogin, getLoginError, getRegister, postRegister, postLogin } from '../controllers/controllersAuth.js';

//import UsersMongoDb from '../models/usersMongoDb.js';

const { default: UsersMongoDb } = await import('../models/usersMongoDb.js')

export const users = new UsersMongoDb()

// FUNCIONES
function isAuth(req,res,next){
    if(req.isAuthenticated()){
        next()
    }
    else{
        res.redirect('/login')
    }
}

// Passport local
let usuarioActual
let idCarrito

passport.use('local', new LocalStrategy(
    async function(username, password, done){
        // const existeUsuario = await model.usuarios.findOne({email: username})
        
        const existeUsuario = await users.getByUsername(username)
        // usuarioActual = existeUsuario
        if(!existeUsuario){
            console.log('usuario no encontrado')
            return done(null, false)
        }
        else{
            const match = await verifyPass(existeUsuario, password)
            if (!match) {
                return done(null, false)
            }
            return done(null, existeUsuario);
        }
    }
))

passport.serializeUser((usuario, done) => {
    done(null, usuario);
});

passport.deserializeUser((nombre, done) => {
    model.usuarios.find({username: nombre})
    .then((res=>{
        done(null, res)
    }))
    .catch((err) =>{
        logError(err.message)
        console.log('error desde deserializacion' + err)
    })
});

// RUTAS
routerAuth.use(passport.initialize())
routerAuth.use(passport.session());

routerAuth.get('/', isAuth, autenticarUsuario)
routerAuth.get('/logout', desloggearUsuario)
routerAuth.get('/login', getLogin)
routerAuth.get('/login-error', getLoginError)
routerAuth.get('/register',getRegister)
routerAuth.get('/datosPersonales', mostrarDatosUsuario)
routerAuth.post('/register',postRegister)
routerAuth.post(
    '/login', 
    passport.authenticate('local', {
        successRedirect:'/', 
        failureRedirect: '/login-error'
    }),
    postLogin
)

// PROCESS: Ruta info con datos del proceso
routerAuth.get('/info', mostrarDatosProcesos)


export {routerAuth, usuarioActual, idCarrito}



// CONTROLLERS AUTH // 

import { CPU_CORES } from '../../index.js';
import { generateHashPassword, verifyPass } from '../bcrypt.js';
// import * as model from '../models/users.js'
import {enviarEmail} from '../../scripts/mailer.js';
import { users } from '../routers/routerAuth.js';

async function saveUser(user){
    // const userSave = await model.usuarios.insertMany(user)
    console.log("Usuario a guardar" + user)
    const userSave = await users.save(user)
    return userSave
}

const mostrarDatosProcesos = (req,res)=>{
    const datos = {
        argumentos: process.argv.slice(2),
        plataforma: process.platform,
        version: process.version,
        rss: process.memoryUsage(),
        path: process.execPath,
        pid: process.pid,
        carpeta: process.cwd(),
        procesadores: CPU_CORES
    }
    console.log(datos)
    res.render('info', {datos: datos})
}

let user

const autenticarUsuario = (req,res) =>{
    const nombre = req.session.passport.user.username
    const email = req.session.passport.user.email
    res.render('main',  {nombre: nombre, email: email})
}

const desloggearUsuario = (req, res) => {
    res.render('logout', {nombre: req.session.passport.user.username})
    req.session.destroy(err=>{
        if(err){
            logError(err.message)
            res.json({status: 'Error al desloggearse', body: err})
        }
    })
}

const mostrarDatosUsuario = (req,res)=>{
    user = req.session.passport.user
    res.render('datosPersonales', {usuario: user})
}

const getLogin = (req, res) => {
    res.render('login')
}

const getLoginError = (req, res) => {
    res.render('login-error')
}

const getRegister = (req,res)=>{
    res.render('register')
}

const postRegister =  async (req,res) =>{
    let{ username, email, tel, password } = req.body
    const newUser = {
        username: username,
        email: email,
        tel: tel,
        password: await generateHashPassword(password)
    }
    
    saveUser(newUser)
    .then((res)=>{
        console.log(res)
        enviarEmail(newUser)
    })
    
    // req.session.nombre = nombre
    res.redirect('/login');
}

const postLogin = (req, res) => {

    res.cookie('userEmail', req.session.passport.user)
}

export {
    mostrarDatosProcesos,
    autenticarUsuario,
    desloggearUsuario,
    user,
    mostrarDatosUsuario,
    getLogin,
    getLoginError,
    getRegister, 
    postRegister,
    postLogin
} 


// usersMongoDb

import ContenedorMongoDb from "../contenedores/contenedorMongoDb.js"

class UsersMongoDb extends ContenedorMongoDb {

    constructor() {
        super('usuarios', {
            username: {type: String, required: true},
            email: {type: String, required: true},
            tel: {type: String, required: false},
            password: {type: String, required: true}
        })
    }
}

export default UsersMongoDb

